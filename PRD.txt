AudIn PRD
1. Overview
AudIn is an AI-powered ‘inbox radio’ that transforms unread emails and calendar events into a daily
personalised podcast-style digest, built in 48 hours. It’s the perfect tool for busy individuals who
like to get an informed start to their day without sifting through a pile of emails.
It connects to a user’s Gmail (via OAuth), fetches recent unread (or recent) emails, and produces a
personalised audio digest that feels like a short podcast episode.
The app is designed to help users hear their inbox — with pacing, emphasis, and conversational
delivery — so they can stay productive on commutes, during workouts, or while multitasking.
Users provide their own OpenAI API key and authenticate via Gmail OAuth. All processing
happens client-side; no backend or long-term storage.
Can also consider the google calendar of the user and provide information about what they have on
today to help them prepare for the day.
2. Goals & Non-Goals
Goals
• Deliver a daily audio summary of the inbox/calendar in under 2 minutes.
• Conversational, human-like pacing: pauses, emphasis on urgent items, category markers.
• Lightweight, transparent, privacy-first: user-provided API key + OAuth, all in-browser.
• Polished audio player UI for playback and download.
• Deployable in <48 hours.
Non-Goals
• Replacing email clients (replying, composing, managing folders).
• Storing user emails or summaries in the cloud.
• Complex multi-user systems.
3. Users & Use Cases
Users
• Commuters: listen to inbox on the go.
• Busy professionals: triage inbox hands-free while multitasking.
• Students & devs: quick daily briefing without getting lost in inbox clutter.
• Productivity hackers: prefer audio over reading.
Primary Use Cases
• Morning Briefing: “Play today’s inbox” before heading into work.
• Commute Companion: digest while walking, driving, or on public transport.
• Hands-Free Prioritisation: quickly hear deadlines, urgent tasks, and FYIs.
4. Core Features
MVP Features
Authentication / Email Fetching
• Gmail OAuth → fetch last N unread messages (default: 20), can be increased by the user.
Summarisation Pipeline
• Extract sender, subject, body.
• Summarise per-email, then assemble into a structured digest:
◦ ⚡ Urgent
◦ 📬 What’s New
◦ 🧠 Keep in Mind/Other
Audio Generation
• Convert digest into natural audio with:
◦ Professional language and tone.
◦ Pauses between categories.
◦ Emphasis on urgent items.
◦ Optional conversational style (“You’ve got 3 urgent emails. First, from Sarah…”).
• Support for:
◦ Web Speech API (instant, free, browser-based).
◦ OpenAI TTS (higher quality, downloadable MP3).
Frontend (Next.js + shadcn/ui)
• (1) Landing Page: API key entry + Gmail connect.
• (2) Dashboard: “Summarise Inbox” button → produces audio digest.
• Playback controls: play, pause, speed (1x, 1.5x, 2x).
• Option to download audio (MP3).
User-Controlled API Key
• Stored in localStorage/sessionStorage, never sent to backend. ALSO OPTION FOR USER
TO ADD THEIR OWN API KEY VIA .env FILE.
5. Technical Architecture
All Client-Side (MVP)
• Next.js app only.
• Gmail API calls directly from client with OAuth token.
• Summarisation + TTS via OpenAI API key (client-side).
✅ Pros: Privacy, no backend infra.
❌ Cons: Browser resource heavy for very large inboxes.
6. UX Flow
1. Landing: user enters API key + connects Gmail (or selected the Demo data)
2. Dashboard: “Summarise Inbox” → shows spinner.
3. Output: audio digest ready to play (main feature), equivalent text digest if the user prefers to
read.
4. Options: adjust speed, download MP3, or copy text summary.
7. Tech Stack
• Framework: Next.js (App Router).
• UI: TailwindCSS + shadcn/ui.
• Email: Gmail API (OAuth 2.0).
• LLM: OpenAI GPT-4.
• TTS: Web Speech API (MVP).
• State: SessionStorage (API key, preferences). (better than LocalStorage for security)
• Hosting: Vercel.
• Google APIS:
Gmail (read): https://www.googleapis.com/auth/gmail.readonly
Calendar (read): https://www.googleapis.com/auth/calendar.readonly
• Ensure correct timezone handling
8. Success Metrics
• Time-to-audio: <2 minutes for first summary.
• User feedback: >70% rate audio as “clear and actionable.”
• Daily active use: % of users who replay digest at least 3x per week.
9. Risks & Mitigations
• OAuth setup complexity → clear docs, possibly preconfigured Google Cloud app.
• Audio quality → fallback: Web Speech API if OpenAI TTS unavailable.
• Privacy concerns → fully open-source, no backend, keys local.
10. Project Plan (48hr Hackathon Sprint)
Day 1
• Scaffold Next.js + Tailwind + shadcn/ui.
• Gmail OAuth integration.
• Per-email summarisation → aggregated digest.
Day 2
• Audio pipeline (Web Speech API MVP).
• Audio player UI (play/pause, speed).
• Export: MP3 download + text copy.
• Deploy on Vercel.
11. Extensions
1. Personalised Voices — select from multiple voice options.
2. Smart Audio Pacing — adjust pause lengths, emphasis, category tones.
3. Calendar Integration — “Today at 2pm you have a meeting with…” integrated into digest.
4. Inbox Vibe Check — one-liner mood summary at start: “Today’s inbox feels like 🚨
deadlines + 📊 budgets.”
👉 Core Positioning:
AudIn is not just an AI email summariser. It’s your personal inbox radio — a daily audio feed
of what matters, so you can triage your inbox without opening your inbox.
12. Important Considerations
Google OAuth Verification
• Gmail + Calendar scopes are sensitive/restricted, so the app must run in Testing mode
during hackathon.
• Only pre-approved test user emails can log in. Plan to add judges’ emails ahead of time.
• For production, full Google verification (and possibly security review) would be required.
Mock/Demo Mode
• Provide a toggle that loads a set of pre-generated “inbox + calendar” items.
• Users can edit/add/remove sample emails to simulate their own inbox.
• Ensures smooth demo even if OAuth fails or judges prefer not to connect Gmail.
API Key Storage & Security
• Default to sessionStorage for ephemeral storage (clears on tab close).
• Include a Clear Data button (?)
• Clarify in README that .env is only for local dev builds (never bundle private keys into
client-only builds).
Email Parsing Reality
• Gmail messages often include long threads, HTML, signatures, and marketing footers.
• Strategy:
◦ Prefer text/plain parts.
◦ Convert HTML → text with sanitizer (e.g., DOMPurify + html-to-text).
◦ Trim quotes/signatures/unsubscribes.
◦ Hard cap body length (~1–2k chars).
• Summarize per-email first, then aggregate to categories to keep LLM cost and latency low.
Privacy & User Comfort
• Display a clear message: “Data is never stored or sent to any server — all processing
happens in your browser.”
TTS Limitations
• Web Speech API: free, fast, but inconsistent voices and no MP3 export.
• OpenAI TTS: higher quality + downloadable MP3, but requires key and adds latency/cost.
• For MVP: default to Web Speech API; offer OpenAI TTS as “High Quality Mode.”
Calendar Edge Cases
• Handle both timed events and all-day events (start.dateTime vs start.date).
• Convert times to the user’s local timezone (via Intl.DateTimeFormat).
• Keep scope minimal (calendar.events.readonly).
Demo Setup for Judges
• Include a Judge Setup section in README with instructions:
◦ Added as OAuth test users.
◦ Optionally label emails (e.g., “AudIn Demo”) so only safe, filtered messages are
read.
◦ Or just flip into Mock Mode to test instantly.